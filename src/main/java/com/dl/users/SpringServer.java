package com.dl.users;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

//@Slf4j
@Controller // This means that this class is a Controller
public class SpringServer {

    // ------------- Constants -------------
    @Autowired // This means to get the bean called productRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ProductRepository productRepository;

    // ------------- Routes -------------
    // Show all products
    @CrossOrigin(origins = "http://localhost:3000")  // Only accessible form REACT
    @RequestMapping("/allProducts")
    public @ResponseBody Iterable getAllProducts(){

        System.out.println("Function allProducts");

        return productRepository.findAll();
    }
    // Show product by ID
    @CrossOrigin(origins = "http://localhost:3000")  // Only accessible form REACT
    @RequestMapping("/detail/{id}")
    public @ResponseBody Optional<Product> getProductById(@PathVariable String id){

        System.out.println("Function ProductById: " + id);

        return productRepository.findById(Integer.valueOf(id));
    }
    // Delete product by ID
    @CrossOrigin(origins = "http://localhost:3000")  // Only accessible form REACT
    @RequestMapping("/delete/{id}")
    public @ResponseBody void deleteProductById(@PathVariable String id){

        System.out.println("Function DeleteById: " + id);

        productRepository.deleteById(Integer.valueOf(id));
    }
    // Add newProduct
    @CrossOrigin(origins = "http://localhost:3000")  // Only accessible form REACT
    @PostMapping("/add")
    public @ResponseBody void addProduct(@RequestBody Product newProduct) {
        System.out.println("newProduct Item: " + newProduct);
        productRepository.save(newProduct);
    }
    // Update product
    @CrossOrigin(origins = "http://localhost:3000")  // Only accessible form REACT
    @PutMapping("/update/{id}")
    public @ResponseBody void updateProduct(@RequestBody Product updatedProduct){
        System.out.println("Function updateProduct: " + updatedProduct.getId());

        productRepository.save(updatedProduct);
    }
}
